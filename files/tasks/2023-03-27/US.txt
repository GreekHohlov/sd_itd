package ru.sber.spring.java13springmy.libraryfilmproject.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.webjars.NotFoundException;
import ru.sber.spring.java13springmy.libraryfilmproject.dto.FilmDTO;
import ru.sber.spring.java13springmy.libraryfilmproject.dto.RoleDTO;
import ru.sber.spring.java13springmy.libraryfilmproject.dto.UserDTO;
import ru.sber.spring.java13springmy.libraryfilmproject.mapper.FilmMapper;
import ru.sber.spring.java13springmy.libraryfilmproject.mapper.UserMapper;
import ru.sber.spring.java13springmy.libraryfilmproject.model.Order;
import ru.sber.spring.java13springmy.libraryfilmproject.model.User;
import ru.sber.spring.java13springmy.libraryfilmproject.repository.UserRepository;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.chrono.ChronoLocalDate;
import java.util.HashSet;
import java.util.Set;

@Service
@Slf4j
public class UserService
        extends GenericService<User, UserDTO> {
    private final FilmMapper filmMapper;
    private final UserRepository userRepository;
    private final BCryptPasswordEncoder bCryptPasswordEncoder;

    protected UserService(UserRepository userRepository,
                          UserMapper userMapper,
                          FilmMapper filmMapper,
                          BCryptPasswordEncoder bCryptPasswordEncoder) {
        super(userRepository, userMapper);
        this.filmMapper = filmMapper;
        this.userRepository = userRepository;
        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
    }

    //Сервис "Получить список всех фильмов пользователя"
    public Set<FilmDTO> getFilmList(Long userId) {
        Set<FilmDTO> filmDTOS = new HashSet<>();
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new NotFoundException("Пользователь с таким ID не найден"));
        Set<Order> orders = user.getOrder();

        LocalDate today = LocalDate.now();
        for (Order order : orders) {
            if (order.isPurchase() ||
                    today.isAfter(ChronoLocalDate.from(order.getRentDate().minusDays(1))) &&
                            today.isBefore(ChronoLocalDate.from(order.getRentDate().plusDays(order.getRentPeriod() + 1)))) {
                filmDTOS.add(filmMapper.toDTO(order.getFilm()));
            }
        }
        return filmDTOS;
    }

    public UserDTO getUserByLogin(final String login) {
        return mapper.toDTO(userRepository.findUserByLogin(login));
    }

    public UserDTO getUserByEmail(final String email) {
        return mapper.toDTO(userRepository.findUserByEmail(email));
    }

    public Boolean checkPassword(String password, UserDetails userDetails) {
        return bCryptPasswordEncoder.matches(password, userDetails.getPassword());
    }

    @Override
    public UserDTO create(UserDTO object) {
        RoleDTO roleDTO = new RoleDTO();
        roleDTO.setId(1L);

       // log.info(roleDTO.toString());

        object.setRole(roleDTO);
        object.setCreatedWhen(LocalDateTime.now());
        object.setPassword(bCryptPasswordEncoder.encode(object.getPassword()));

        //log.info(object.toString());

        return mapper.toDTO(userRepository.save(mapper.toEntity(object)));
    }
}
